#!/bin/sh

# Tool to update the kernelci.org production instance

set -e

cmd_pull() {
    echo "Updating local repository"
    git pull --ff-only
}

cmd_core() {
    # First, manually push to kernelci-core/kernelci.org branch

    branch="${1:-kernelci.org}"
    echo "Getting $branch branch from kernelci-core"
    [ -d checkout/kernelci-core ] || {
        mkdir -p checkout
        git clone \
            https://github.com/kernelci/kernelci-core.git \
            checkout/kernelci-core \
            -b $branch
    }
    cd checkout/kernelci-core
    git remote update origin
    git checkout origin/$branch
    cd -
}

cmd_rootfs() {
    echo "Updating debos Docker image"
    cd checkout/kernelci-core/jenkins/dockerfiles
    ./build-and-push.sh -dn
    while true; do
        ./build-and-push.sh -dp && break || { echo "Retrying..."; sleep 3; }
    done
    cd -

    echo "Starting rootfs build jobs"
    python3 trigger.py \
        --settings=data/prod-jenkins.ini \
        rootfs-build-trigger
}

cmd_backend() {
    # First, manually update kernelci-backend kernelci.org branch

    rev="${1:-kernelci.org}"
    echo "Updating kernelci-backend to $rev"
    ./ansible \
        kernelci-backend \
        api.kernelci.org \
        $rev \
        $PWD/keys/id_rsa_kernelci.org
}

cmd_frontend() {
    # First, manually update kernelci-frontend kernelci.org branch

    rev="${1:-kernelci.org}"
    echo "Updating kernelci-frontend to $rev"
    ./ansible \
        kernelci-frontend \
        kernelci.org \
        $rev \
        $PWD/keys/id_rsa_kernelci.org
}

cmd_docker() {
    cd checkout/kernelci-core/jenkins/dockerfiles
    echo "Re-building Docker images"
    ./build-and-push.sh -bikn
    echo "Pushing Docker images"
    while true; do
        ./build-and-push.sh -bikp && break || { echo "Retrying..."; sleep 3; }
    done
    cd -
}

cmd_kernel() {
    echo "Pushing kernelci.org LTS kernel branch"
    ./kernel.py \
        --from-url=git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git \
        --from-branch=linux-5.4.y \
        --branch=kernelci.org \
        --tag-prefix=kernelci- \
        --ssh-key=$PWD/keys/id_rsa_kernelci.org \
        --push
}

cmd_all() {
    cmd_pull
    cmd_core
    cmd_rootfs
    cmd_backend
    cmd_frontend
    cmd_docker
}

cmd="${1}"

if [ -n "$cmd" ]; then
    shift 1
else
    cmd="all"
fi

"cmd_"$cmd $@

exit 0
