#!/bin/sh

# Periodic job run on staging.kernelci.org to merge together all the pending
# PRs and update the staging.kernelci.org branches, then update Docker images
# and trigger a full build/test cycle with a kernel branch based on linux-next.

set -e

cmd_pull() {
    echo "Updating local repository"
    git pull --ff-only
}

cmd_jenkins() {
    echo "Updating Jenkins jobs"
    ./pending.py kernelci-jenkins --push

    [ -d checkout/kernelci-jenkins/data ] || {
        # To set this up:
        # git clone https://github.com/kernelci/kernelci-jenkins-data.git data
        # cd data; git-crypt unlock
        # cd ..; ln -s data/bot.staging.kernelci.org/env .env

        echo "Encrypted kernelci-jenkins-data repository not set up"
        return 1
    }

    echo "Updating encrypted data checkout"
    topdir=$(pwd)
    cd checkout/kernelci-jenkins/data
    git remote update origin
    data_diff=$(git diff origin/main)
    if [ -n "$data_diff" ]; then
        git checkout origin/main
        cd "$topdir/checkout/kernelci-jenkins"
        echo "Recreating Jenkins container"
        docker-compose down
        docker-compose up --build -d
        sleep 60  # magic - another way to do this would be to poll something
    else
        cd "$topdir/checkout/kernelci-jenkins"
        # ToDo: restart the container but only when there were some changes in
        # kernelci-jenkins to avoid aborting running jobs unnecessarily
    fi
    cd "$topdir"

    echo "Triggering Jenkins seed job"
    python3 job.py --no-params trigger job-dsl
}

cmd_core() {
    echo "Updating kernelci-core"
    ./pending.py kernelci-core --push
}

cmd_bootrr() {
    echo "Updating bootrr"
    ./pending.py bootrr --push
}

cmd_buildroot() {
    echo "Updating buildroot"
    ./pending.py buildroot --push
}

cmd_test_definitions() {
    echo "Updating test-definitions"
    ./pending.py test-definitions --push
    ./pending.py iec-security --push
}

cmd_backend() {
    opt="$1"

    echo "Checking for missing indexes by finding COLLSCAN events"
    echo "db.system.profile.aggregate([{\$match: {ns: {\$in: ['kernel-ci.test_case', 'kernel-ci.test_group', 'kernel-ci.test_regression', 'kernel-ci.build']}, planSummary: 'COLLSCAN'}}, {\$group: {_id: {ns: '\$ns', planSummary: '\$planSummary'}}}])" | mongo kernel-ci

    if [ "$opt" = "indexes" ]; then
        echo "Dropping Mongo DB indexes"
        echo "db.test_case.dropIndexes(); db.test_group.dropIndexes(); db.test_regression.dropIndexes(); db.build.dropIndexes();" | mongo kernel-ci
    fi

    echo "Updating kernelci-backend"
    ./pending.py kernelci-backend --push
    # ToDo: check if there were any changes to skip if there weren't any
    ./ansible kernelci-backend api.staging.kernelci.org

    echo "Resetting and enabling the Mongo DB profiler"
    echo "db.setProfilingLevel(0); db.system.profile.drop(); db.setProfilingLevel(2);" | mongo kernel-ci
}

cmd_frontend() {
    echo "Updating kernelci-frontend"
    ./pending.py kernelci-frontend --push
    # ToDo: check if there were any changes to skip if there weren't any
    ./ansible kernelci-frontend staging.kernelci.org
}

cmd_website() {
    echo "Updating static website"
    ./pending.py kernelci-project --push
    topd=$PWD
    cd checkout/kernelci-project/kernelci.org
    git-lfs checkout
    git submodule update --init --recursive
    for d in external/*; do
        echo "Checking out staging branch for $d"
        cd "$d"
        git remote update origin
        git checkout origin/staging.kernelci.org
        cd -
    done
    ./docker-hugo -D -b https://static.staging.kernelci.org/
    cd "$topd"
}

cmd_kernel() {
    tree="${1:-next}"

    echo "Pushing kernel test branch for ${tree}"

    case $tree in
        next)
            url=https://git.kernel.org/pub/scm/linux/kernel/git/next/linux-next.git
            branch=master
            ;;
        mainline)
            url=https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git
            branch=master
            ;;
        stable)
            url=https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git
            branch=linux-5.4.y
            ;;
        *)
            echo "Unknown tree"
            exit 1
            ;;
    esac

    ./kernel.py \
        --push \
        --ssh-key=keys/id_rsa_staging.kernelci.org \
        --from-url=$url \
        --from-branch=$branch \
        --branch=staging-"$tree" \
        --tag-prefix=staging-"$tree"-
}

cmd_docker() {
    echo "Updating Docker images"
    # ToDo: check if there were any changes to skip if there weren't any
    cd checkout/kernelci-core/config/docker
    ./build-and-push.sh -pbdikQrce -t kernelci/staging-
    cd -
}

cmd_monitor() {
    echo "Triggering Jenkins kernel-tree-monitor job"
    python3 \
        job.py \
        --json=data/staging-monitor.json \
        trigger \
        kernel-tree-monitor
}

cmd_rotate_tree() {
    if [ -e .tree ]; then
        last=$(cat .tree)
    else
        last=
    fi

    case $last in
        next)
            tree=mainline
            ;;
        mainline)
            tree=stable
            ;;
        stable)
            tree=next
            ;;
        *)
            tree=next
            ;;
    esac

    echo $tree > .tree
    echo $tree
}

cmd_all() {
    tree="$1"

    [ -z $tree ] && tree=$(cmd_rotate_tree)
    echo "Kernel tree: $tree"

    cmd_pull
    cmd_jenkins
    cmd_core
    cmd_bootrr
    cmd_buildroot
    cmd_test_definitions
    cmd_backend
    cmd_frontend
    cmd_website
    cmd_kernel $tree
    cmd_docker
    cmd_monitor
}

cmd="${1}"

if [ -n "$cmd" ]; then
    shift 1
else
    cmd="all"
fi

"cmd_"$cmd $@

exit 0
